const n="# Stream Editing (sed)\r\n\r\n## Basic Function\r\n\r\n* `sed` performs **text transformations** on each input line.\r\n* Input: file or `stdin`; Output: modified text to `stdout`.\r\n\r\n## Key Options\r\n\r\n* `-E`: enable **extended regular expressions** (like `+`, `?`, `|`, `()`).\r\n* `-n`: suppress automatic printing (used with `p` command).\r\n* `-i`: edit files **in-place** (use with caution).\r\n\r\n## Common Commands\r\n\r\n* `s/old/new/`: replace first occurrence of `old` with `new`.\r\n* `s/old/new/g`: replace **all** occurrences on the line.\r\n* `s/old/new/i`: case-insensitive replace.\r\n* `/pattern/d`: delete lines matching pattern.\r\n* `/pattern/p`: print lines matching pattern (used with `-n`).\r\n\r\n## Examples\r\n\r\n* `sed 's/dog/cat/' file`: replace first `dog` with `cat` on each line.\r\n* `sed 's/dog/cat/g' file`: replace **all** `dog`s with `cat`.\r\n* `sed -E 's/[0-9]+/NUM/g'`: replace all numbers with `NUM`.\r\n* `sed '/^#/d' file`: delete all comment lines (starting with `#`).\r\n* `sed -n '/error/p' file`: print only lines containing `error`.\r\n\r\n## Notes\r\n\r\n* `sed` operates line-by-line by default.\r\n* Use `-E` for readable regex (instead of escaping `()` or `+`).\r\n* Combining `sed` with `cut`, `sort`, `uniq` gives powerful pipelines.\r\n* Use `-i` for in-place edits, but **always back up** first.\r\nAbsolutely — here’s the expanded section on **successive commands, conditionals, and more**, in the same concise format:\r\n\r\n## Advanced Usage\r\n\r\n### Multiple Commands\r\n\r\n* Use `-e` for each command:\r\n\r\n  * `sed -e 's/foo/bar/' -e 's/baz/qux/' file`\r\n* Or separate with `;` inside one script:\r\n\r\n  * `sed 's/foo/bar/; s/baz/qux/' file`\r\n\r\n### Conditional Execution\r\n\r\n* Run commands **only if a pattern matches**:\r\n\r\n  * `sed '/pattern/ { cmd1; cmd2 }' file`\r\n* Example:\r\n\r\n  * `sed '/#include/ { s/\"/</; s/\">/>/ }'` → replace quotes only in `#include` lines\r\n\r\n### Apply to Specific Lines\r\n\r\n* Line number instead of pattern:\r\n\r\n  * `sed '3d' file`: delete line 3\r\n  * `sed '1,5s/foo/bar/' file`: replace in lines 1–5 only\r\n\r\n### Address Ranges\r\n\r\n* Match between patterns:\r\n\r\n  * `sed '/BEGIN/,/END/d' file`: delete everything from `BEGIN` to `END`\r\n  * Note that the `^` and `$` anchors are line specific, even though this command spans over multiple lines.\r\n\r\n### Looping and Labels (advanced)\r\n\r\n* Use `:label`, `b`, and `t` for loops and branching (rare in basic usage)\r\n\r\n  * Example:\r\n\r\n    ```bash\r\n    sed ':a; /pattern/ { N; ba }'  # Slurp lines until pattern disappears\r\n    ```\r\n\r\n### Tips\r\n\r\n* Always test multiline or complex scripts without `-i` first.\r\n* Use `{ ... }` to group multiple commands under a condition.\r\n* With `-n`, use `p` to explicitly print what you want.\r\n\r\n\r\nLet me know if you want a printable cheat sheet version or `awk` covered next.\r\n";export{n as default};
