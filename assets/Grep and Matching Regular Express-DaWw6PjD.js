const e="# Grep and Matching Regular Expressions on the Command Line\r\n\r\n`grep` is used to search for patterns in text.\r\n`-E` enables extended regex\r\n\r\nUse the command as follows:\r\n\r\n```bash\r\ngrep -E <expression> <filename>\r\n```\r\n\r\nFor example:\r\n\r\n```bash\r\ngrep -E '[0-9]{3}-[0-9]{3}-[0-9]{4}' file.txt\r\n```\r\n\r\nThis page will have a list of the basics of the rules you should know:\r\n\r\n- `|`: Alternation uses the pipe character, matching one OR another. For example:\r\n\r\n```bash\r\ngrep -E 'cat|dog' file.txt\r\n```\r\n\r\n## Useful Keywords\r\n| Option | Description                      |\r\n| ------ | -------------------------------- |\r\n| `-i`   | Ignore case                      |\r\n| `-v`   | Invert match                     |\r\n| `-E`   | Use extended regex               |\r\n| `-r`   | Recursively search directories   |\r\n| `-n`   | Show line numbers                |\r\n| `-c`   | Show match count                 |\r\n| `-o`   | Only print matching part of line |\r\n| `-w`   | Match whole words only           |\r\n| `-x`   | Match whole line only            |\r\n| `-A N` | Show N lines **after** match     |\r\n| `-B N` | Show N lines **before** match    |\r\n| `-C N` | Show N lines **around** match    |\r\n\r\n\r\n## Grouping\r\n\r\n- `()`: Grouping uses parentheses for group patterns, such as `gr(a|e)y` to match `grey` and `gray`.\r\n\r\n- `[]`: For lists of characters, you use brackets, so `[abc]` would be the letters `a`, `b` and `c`. `[a-z]` is the lowercase letters of the alphabet, `[A-Z]` is the uppercase letters, and `[a-zA-Z]` is both. Doing `[^abc]` is everything that isn't in the list (not `a`, `b` or `c`).\r\n\r\n## Beginning and Ends\r\n\r\n- `^`: At the start of a string, use caret, so for example, if you don't want words starting with a vowel, you use `^[^adieu]`. \r\n- `$`: Use a dollar sign at the end, so words that do not end with a vowel should be `[^aeiou]$`.\r\n\r\n## Repetition\r\n\r\n- `*`: Adding an asterisk means it's repeated indefinitely. So for example, a word that is only made from vowels would be `[aeiou]*`.\r\n- `.`: Full stop (or period) is to represent any character, so typing `.*` basically means any character for an arbitrary amount.\r\n- `?`: Question mark is for zero or one times (think of it as a single, optional character)\r\n- `+`: Plus sign is for one or more\r\n- `{}`: Using braces allows you to define how may times something is expected, for example, `{3}` means three times, `{2, 5}` means between two and five (inclusive), and `{2,}` means two or more.\r\n";export{e as default};
