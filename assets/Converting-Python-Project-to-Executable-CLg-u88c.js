const n="# Converting Your Python Project to an Executable File\r\n\r\nPyInstaller bundles a Python application and all its dependencies into a single package, such as a standalone executable file, for Windows, macOS, or Linux. Begin by installing `pyinstaller` with:\r\n\r\n```\r\npip install pyinstaller\r\n```\r\n\r\nIn the root of your directory, you can run this to turn it into an executable. The basic usage as follows:\r\n```bash\r\npyinstaller [OPTIONS] script.py\r\n```\r\n\r\n## Common Options\r\n\r\n### Output Format\r\n- `--onefile` : Package into a single executable.\r\n- `--onedir` : Package into a directory (default).\r\n\r\n### Build Cleanliness\r\n- `--clean` : Remove temporary files from previous builds.\r\n- `--noconfirm` : Overwrite output directory without asking.\r\n\r\n### Console/UI\r\n- `--console` : Show a console window (default).\r\n- `--windowed` : Hide console window (for GUI apps).\r\n\r\n### Icons & Version Info\r\n- `--icon=ICON_FILE` : Set the app icon (`.ico` on Windows, `.icns` on macOS).\r\n- `--version-file=FILE` : Attach version metadata from a file (Windows only).\r\n\r\n### Data & Resources\r\n- `--add-data \"SRC;DEST\"` : Include extra files (use `:` on Unix, `;` on Windows).\r\n- `--add-binary \"SRC;DEST\"` : Include binary files like DLLs.\r\n- `--collect-data=MODULE` : Automatically include data for a module.\r\n- `--collect-all=MODULE` : Include all data and submodules of a module.\r\n\r\n### Hidden Imports\r\n- `--hidden-import=MODULE` : Include a module not found automatically.\r\n\r\n### Debugging & Logging\r\n- `--debug=all` : Enable verbose debug output.\r\n- `--log-level=LEVEL` : Set logging level (e.g., `INFO`, `DEBUG`).\r\n\r\n### Output Control\r\n- `--name NAME` : Name the output file.\r\n- `--distpath DIR` : Set output directory for final build.\r\n- `--workpath DIR` : Set path for temporary build files.\r\n- `--specpath DIR` : Set path to store the generated `.spec` file.\r\n\r\n### Runtime\r\n- `--runtime-tmpdir DIR` : Set where the executable unpacks at runtime.\r\n- `--noupx` : Disable UPX compression.\r\n\r\n## Tips\r\n- Use `--windowed` for GUI apps to avoid opening a terminal window.\r\n- Use `--noconfirm` and `--clean` for CI/CD automation.\r\n- Use platform-specific separators for `--add-data` (colon `:` for Unix, semicolon `;` for Windows).\r\n\r\n\r\n## Example Command\r\n```bash\r\npyinstaller --onefile --clean --windowed --icon=app.icns \\\r\n--add-data \"assets:assets\" --name MyApp main.py\r\n```\r\n\r\nRemember, the `\\` symbol means you can continue the command on the next line. If you are using a batch file for Windows, use `^` instead.\r\n\r\n\r\n## Using Paths and Data\r\n\r\nAs mentioned before, using imported data requires you to include the flag `--add-data` as outlined above. However, in your code, you should find the relative path using this wrapper:\r\n\r\n```python\r\nimport os\r\n\r\ndef get_resource_path(relative_path):\r\n    if hasattr(sys, '_MEIPASS'):\r\n        return os.path.join(sys._MEIPASS, relative_path)\r\n    return os.path.join(os.path.abspath(\".\"), relative_path)\r\n```\r\n\r\nThis allows you to replace the path when opening a file from this:\r\n\r\n```python\r\nopen('path/to/file.txt', 'r') as file: pass # Incorrect\r\nopen(get_resource_path('path/to/file.txt'), 'r') as file: pass # Correct\r\n```\r\n\r\n## Further Help\r\nRun:\r\n```bash\r\npyinstaller --help\r\n```\r\nFor full documentation, visit: https://pyinstaller.org/";export{n as default};
