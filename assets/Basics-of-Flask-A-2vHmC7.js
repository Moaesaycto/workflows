const r='# Setting Up a Flask Server\r\n\r\n\r\n## **1. Install Flask**\r\nEnsure you have Python installed, then install Flask:\r\n\r\n```sh\r\npip install flask\r\n```\r\n\r\n\r\n## **2. Create a Basic Flask Server**\r\nCreate a file called `app.py` and add:\r\n\r\n```python\r\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route(\'/\')\r\ndef home():\r\n    return "Hello, Flask!"\r\n\r\nif __name__ == \'__main__\':\r\n    app.run(debug=True)\r\n```\r\n\r\nRun it with:\r\n\r\n```sh\r\npython app.py\r\n```\r\n\r\nBy default, this starts a server at `http://127.0.0.1:5000/`.\r\n\r\n\r\n## **3. Enable Cross-Origin Resource Sharing (CORS)**\r\nIf your frontend is separate (React, Vue, etc.), enable **CORS** to allow requests from different origins.\r\n\r\nInstall the CORS package:\r\n\r\n```sh\r\npip install flask-cors\r\n```\r\n\r\nModify `app.py`:\r\n\r\n```python\r\nfrom flask_cors import CORS\r\n\r\napp = Flask(__name__)\r\nCORS(app)  # Enables CORS for all routes\r\n```\r\n\r\nTo restrict CORS to specific origins:\r\n\r\n```python\r\nCORS(app, resources={r"/*": {"origins": "http://localhost:3000"}})\r\n```\r\n\r\n\r\n## **4. Using Blueprints for Modular Code**\r\nFor larger apps, **Blueprints** help organize routes.\r\n\r\nCreate a folder **`routes/`** and inside it, a file `hello.py`:\r\n\r\n```python\r\nfrom flask import Blueprint\r\n\r\nhello_bp = Blueprint(\'hello\', __name__)\r\n\r\n@hello_bp.route(\'/hello\')\r\ndef hello():\r\n    return "Hello from Blueprint!"\r\n```\r\n\r\nNow, update `app.py`:\r\n\r\n```python\r\nfrom flask import Flask\r\nfrom routes.hello import hello_bp\r\n\r\napp = Flask(__name__)\r\napp.register_blueprint(hello_bp, url_prefix=\'/api\')\r\n\r\nif __name__ == \'__main__\':\r\n    app.run(debug=True)\r\n```\r\n\r\nNow, `/api/hello` will return `"Hello from Blueprint!"`.\r\n\r\n\r\n## **5. Basic Security Measures**\r\nFlask provides built-in security features, but some best practices include:\r\n\r\n### **Use `Flask-Talisman` for Security Headers**\r\n```sh\r\npip install flask-talisman\r\n```\r\n\r\nModify `app.py`:\r\n\r\n```python\r\nfrom flask_talisman import Talisman\r\n\r\napp = Flask(__name__)\r\nTalisman(app)  # Enforces security headers like Content Security Policy\r\n```\r\n\r\n\r\n### **Use Environment Variables for Secrets**\r\nInstead of hardcoding secrets, store them in an `.env` file:\r\n\r\n```sh\r\nFLASK_SECRET_KEY=your-secret-key\r\n```\r\n\r\nThen, load it in `app.py`:\r\n\r\n```python\r\nimport os\r\nfrom dotenv import load_dotenv\r\n\r\nload_dotenv()\r\napp.secret_key = os.getenv("FLASK_SECRET_KEY")\r\n```\r\n\r\nInstall the dotenv package if needed:\r\n\r\n```sh\r\npip install python-dotenv\r\n```\r\n\r\n\r\n## **6. Deploying Your Flask App**\r\nFor production, use **Gunicorn**:\r\n\r\n```sh\r\npip install gunicorn\r\ngunicorn -w 4 -b 0.0.0.0:5000 app:app\r\n```\r\n\r\nOr deploy with **Docker**:\r\n\r\n```dockerfile\r\nFROM python:3.10\r\nWORKDIR /app\r\nCOPY . .\r\nRUN pip install -r requirements.txt\r\nCMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:5000", "app:app"]\r\n```\r\n';export{r as default};
